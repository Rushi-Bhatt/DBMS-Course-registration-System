//TRIGGER TO INSERT INTO WAIT_LIST and decrease waitlist capacity from class
create or replace trigger add_to_waitlist_after_insert
   AFTER INSERT
   ON ENROLLMENT
   FOR EACH ROW
   DECLARE
   sid INTEGER;
   CLASS_ID INTEGER;
   BEGIN
   IF :new.STATUS='Waitlisted' then
   insert into wait_list(sid, class_id) values(:new.sid, :new.class_id);
   update class set waitlist_capacity= waitlist_capacity-1 where class_id = :new.class_id;
   end IF;
   IF :new.STATUS='Pending' then
   update class set capacity=capacity-1 where class_id = :new.class_id;
   end IF;
   IF :new.STATUS='Enrolled' then
   update class set capacity=capacity-1 where class_id = :new.class_id;
   end IF;
   END;




//trigger to manage capacity and waitlist capacity of class, delete entry from waitlist after it has been updated in enrollment

create or replace trigger del_waitlist_after_update
    AFTER UPDATE of STATUS
    ON ENROLLMENT
    FOR EACH ROW
    DECLARE
    BEGIN
    IF :new.STATUS='Enrolled' then
    	IF :old.STATUS='Waitlisted' then
		delete from wait_list where sid = :old.sid and class_id = :old.class_id;
    	update class set waitlist_capacity= waitlist_capacity+1, capacity = capacity-1 where class_id = :new.class_id;
		ELSE
		update class set capacity = capacity-1 where class_id = :new.class_id;
		end IF;
	end IF;
	IF :new.STATUS='Rejected' AND :old.STATUS='Waitlisted' then
	delete from wait_list where sid = :old.sid and class_id = :old.class_id;
    update class set waitlist_capacity= waitlist_capacity+1 where class_id = :new.class_id;
	end IF;
   	END;

//Trigger to add bill after the insert and update of enrollment
CREATE OR REPLACE TRIGGER "generate_bill_after_iu"
AFTER 
	INSERT OR 
	UPDATE
ON ENROLLMENT
FOR EACH ROW

DECLARE
	cost FLOAT(10);
	ssid NUMBER(30);
	perCreditRate NUMBER(10);
	
BEGIN
		IF :NEW.STATUS = 'Enrolled' THEN
		SELECT STUDENT_SPECIAL_ID INTO ssid from student WHERE SID = :NEW.SID;
		SELECT PER_CREDIT_RATE INTO perCreditRate from student_special WHERE STUDENT_SPECIAL_ID = ssid; 
		cost:=  perCreditRate * :NEW.CREDIT;
		INSERT into ACCOUNT VALUES(ACCOUNT_SEQ.NEXTVAL,cost,:NEW.SID);
		END IF;	
END;
/

//Trigger to delete the bill after student drops a course
CREATE OR REPLACE TRIGGER "generate_bill_before_d"
BEFORE DELETE
ON ENROLLMENT
FOR EACH ROW

DECLARE
	cost FLOAT(10);
	ssid NUMBER(30);
	perCreditRate NUMBER(10);
	
BEGIN
		IF :OLD.STATUS = 'Enrolled' THEN
		SELECT STUDENT_SPECIAL_ID INTO ssid from student WHERE SID = :OLD.SID;
		SELECT PER_CREDIT_RATE INTO perCreditRate from student_special WHERE STUDENT_SPECIAL_ID = ssid; 
		cost:=  -1*perCreditRate * :OLD.CREDIT;
		INSERT into ACCOUNT VALUES(ACCOUNT_SEQ.NEXTVAL,cost,:OLD.SID);
		END IF;	
END;
/

//TRIGGER TO INCREASE SPECIAL_PERMISSION_ID
 CREATE OR REPLACE TRIGGER sp_perm_id_inc
  2  BEFORE INSERT ON SPECIAL_PERMISSION
  3  FOR EACH ROW
  4  BEGIN
  5  SELECT sp_perm_id.NEXTVAL
  6  INTO :new.SPCL_PERM_ID
  7  FROM dual;
  8  END;
  9  /

 //Procedure to calculate the GPA: 
CREATE PROCEDURE update_gpa (student_id NUMBER) AS      
BEGIN
UPDATE STUDENT SET GPA = ( SELECT AVG(GRADE_POINTS) from GRADE_MAP,ENROLLMENT WHERE GRADE_MAP.GRADE = ENROLLMENT.GRADE 
AND ENROLLMENT.SID = student_id )  WHERE SID  =  student_id;
END;
 