1. TRIGGER TO INSERT INTO WAIT_LIST and decrease waitlist capacity from class
--------------------------------------------------------------------------------------------------------------------------------------------------------------
create or replace trigger add_to_waitlist_after_insert
   AFTER INSERT
   ON ENROLLMENT
   FOR EACH ROW
   DECLARE
   sid INTEGER;
   CLASS_ID INTEGER;
   BEGIN
   IF :new.STATUS='Waitlisted' then
   insert into wait_list(sid, class_id) values(:new.sid, :new.class_id);
   update class set waitlist_capacity= waitlist_capacity-1 where class_id = :new.class_id;
   end IF;
   IF :new.STATUS='Pending' then
   INSERT INTO 
   update class set capacity=capacity-1 where class_id = :new.class_id;
   end IF;
   IF :new.STATUS='Enrolled' then
   update class set capacity=capacity-1 where class_id = :new.class_id;
   end IF;
   END;
   
--------------------------------------------------------------------------------------------------------------------------------------------------------------
2. Trigger to manage capacity and waitlist capacity of class, delete entry from waitlist after it has been updated in enrollment
--------------------------------------------------------------------------------------------------------------------------------------------------------------
create or replace trigger del_waitlist_after_update
    AFTER UPDATE of STATUS
    ON ENROLLMENT
    FOR EACH ROW
    DECLARE
    BEGIN
	IF :new.STATUS='Rejected' AND :old.STATUS='Waitlisted' then
	delete from wait_list where sid = :old.sid and class_id = :old.class_id;
    update class set waitlist_capacity= waitlist_capacity+1 where class_id = :new.class_id;
	end IF;
	IF :new.STATUS='Rejected' AND :old.STATUS='Pending' then
	delete from special_permission where sid = :old.sid and class_id = :old.class_id;
    update class set capacity= capacity+1 where class_id = :old.class_id;
	end IF;
   	END;
--------------------------------------------------------------------------------------------------------------------------------

3. Trigger to add bill after the insert and update of enrollment
--------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE TRIGGER "generate_bill_after_iu"
AFTER 
	INSERT OR 
	UPDATE
ON ENROLLMENT
FOR EACH ROW

DECLARE
	cost FLOAT(10);
	ssid NUMBER(30);
	perCreditRate NUMBER(10);
	
BEGIN
		IF :NEW.STATUS = 'Enrolled' THEN
		SELECT STUDENT_SPECIAL_ID INTO ssid from student WHERE SID = :NEW.SID;
		SELECT PER_CREDIT_RATE INTO perCreditRate from student_special WHERE STUDENT_SPECIAL_ID = ssid; 
		cost:=  perCreditRate * :NEW.CREDIT;
		INSERT into ACCOUNT VALUES(ACCOUNT_SEQ.NEXTVAL,cost,:NEW.SID);
		END IF;	
END;
/
--------------------------------------------------------------------------------------------------------------------------------

4. Trigger to delete the bill after student drops a course
--------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE TRIGGER "generate_bill_before_d"
BEFORE DELETE
ON ENROLLMENT
FOR EACH ROW

DECLARE
	cost FLOAT(10);
	ssid NUMBER(30);
	perCreditRate NUMBER(10);
	
BEGIN
		IF :OLD.STATUS = 'Enrolled' THEN
		SELECT STUDENT_SPECIAL_ID INTO ssid from student WHERE SID = :OLD.SID;
		SELECT PER_CREDIT_RATE INTO perCreditRate from student_special WHERE STUDENT_SPECIAL_ID = ssid; 
		cost:=  -1*perCreditRate * :OLD.CREDIT;
		INSERT into ACCOUNT VALUES(ACCOUNT_SEQ.NEXTVAL,cost,:OLD.SID);
		END IF;	
END;
/
--------------------------------------------------------------------------------------------------------------------------------

5. TRIGGER TO INCREASE SPECIAL_PERMISSION_ID
--------------------------------------------------------------------------------------------------------------------------------
 CREATE OR REPLACE TRIGGER sp_perm_id_inc
  2  BEFORE INSERT ON SPECIAL_PERMISSION
  3  FOR EACH ROW
  4  BEGIN
  5  SELECT sp_perm_id.NEXTVAL
  6  INTO :new.SPCL_PERM_ID
  7  FROM dual;
  8  END;
  9  /
--------------------------------------------------------------------------------------------------------------------------------

6. Procedure to calculate the GPA
 --------------------------------------------------------------------------------------------------------------------------------
CREATE PROCEDURE update_gpa (student_id NUMBER) AS      
BEGIN
UPDATE STUDENT SET GPA = ( SELECT AVG(GRADE_POINTS) from GRADE_MAP,ENROLLMENT        
WHERE GRADE_MAP.GRADE = ENROLLMENT.GRADE AND ENROLLMENT.SID = student_id )  WHERE SID  =  student_id;
END;
--------------------------------------------------------------------------------------------------------------------------------

7. Trigger to input data in user_login when a student is enrolled
--------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE TRIGGER ENROLL_USER_LOGIN 
AFTER INSERT ON STUDENT 
FOR EACH ROW 
DECLARE 
username varchar(20); 
BEGIN 
username :=  SUBSTR(:NEW.FNAME,1,1) ||''||SUBSTR(:NEW.LNAME,1,1) ||''|| :NEW.SID; 
INSERT INTO USER_LOGIN 
( USERNAME, 
PERSON_ID,PASSWORD, ROLE) VALUES (username, :NEW.SID,:NEW.SID,'S'); 
END;
--------------------------------------------------------------------------------------------------------------------------------

8. Trigger to input data in user_login when an admin is added
--------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE TRIGGER ADMIN_USER_LOGIN 
AFTER INSERT ON ADMIN 
FOR EACH ROW 
DECLARE 
username varchar(20);
BEGIN 
username :=  SUBSTR(:NEW.FNAME,1,1) ||''||SUBSTR(:NEW.LNAME,1,1) ||''|| :NEW.EMP_ID; 
INSERT INTO USER_LOGIN 
( USERNAME, 
PERSON_ID,PASSWORD, ROLE) VALUES (username, :NEW.EMP_ID,'hogwarts','A'); 
END;
--------------------------------------------------------------------------------------------------------------------------------

9. TRIGGER CALLED WHEN DEADLINE IS ENFORCED
--------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE TRIGGER GLOBAL_VAR_TRIGGER 
AFTER INSERT OR UPDATE ON GLOBAL_VAR 
FOR EACH ROW 
BEGIN 
IF :NEW.DEADLINE_ENFORCED = 1 THEN 
		GENERATE_BILL_PROCEDURE(:NEW.SEMESTER);  
		MODIFY_WAITLIST_PROCEDURE(:NEW.SEMESTER);  
		MODIFY_PENDING_PROCEDURE(:NEW.SEMESTER);  
END IF;
END;
--------------------------------------------------------------------------------------------------------------------------------            			
            			
10. Procedure to drop courses if student has not paid the bill after deadline is enforced
--------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE GENERATE_BILL_PROCEDURE 
(SEM IN VARCHAR2)
 IS 
STUDENT_ID NUMBER; 
CURSOR CUR IS SELECT SID INTO STUDENT_ID FROM ACCOUNT GROUP BY SID HAVING SUM(BILLAMOUNT)>0; 
BEGIN 
	FOR STUDENT_ID IN CUR 
		LOOP 
			UPDATE ENROLLMENT SET STATUS = 'Rejected' WHERE SID = STUDENT_ID.SID AND SEMESTER = SEM; 
		END LOOP; 
END;
--------------------------------------------------------------------------------------------------------------------------------

11. Procedure to drop all waitlisted courses after deadline is enforced
--------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE MODIFY_WAITLIST_PROCEDURE 
(SEM IN VARCHAR2)
 IS 
BEGIN   
UPDATE ENROLLMENT SET STATUS = 'Rejected' WHERE STATUS='Waitlisted'; 
END;
--------------------------------------------------------------------------------------------------------------------------------

12. Procedure to drop all pending status courses after deadline is enforced
--------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE MODIFY_PENDING_PROCEDURE 
(SEM IN VARCHAR2)
 IS 
BEGIN 
UPDATE ENROLLMENT SET STATUS = 'Rejected' WHERE STATUS='Pending';
END;
--------------------------------------------------------------------------------------------------------------------------------